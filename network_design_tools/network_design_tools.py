# -*- coding: utf-8 -*-
"""
/***************************************************************************
 NetworkDesignTools
                                 A QGIS plugin
 Network Design Tools
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-02-24
        git sha              : $Format:%H$
        copyright            : (C) 2021 by ESDM
        email                : paulm@esdm.co.uk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import sys
import os.path
sys.path.append(os.path.dirname(__file__))

from qgis.PyQt.QtCore import Qt, QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon 
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QToolButton, QMenu, QTableView
from qgis.core import QgsProject, QgsProcessingFeatureSourceDefinition, QgsFeature, QgsVectorLayer, QgsPoint, QgsField, QgsWkbTypes, \
                      QgsMultiLineString, QgsLineString, QgsExpression, QgsFeatureRequest, QgsVectorLayerUtils, QgsVectorDataProvider, \
                      QgsMarkerSymbol, QgsLineSymbol, QgsGeometry, QgsPointXY

# Initialize Qt resources from file resources.py
from .resources import *
# Import generic functions
import common
#from .common import getLayerByName
# Import the code for the point tool
from .map_tools import PointMapTool, MovePointMapTool, SelectCPTool, FreehandPolygonMapTool
# Import the code for the dialog
from .property_count_dialog import PropertyCountDialog
import os.path
import processing

class NetworkDesignTools:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'NetworkDesignTools_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # initialize freeHandTools
        self.activeTool = None
        #self.pointTool = PointMapTool(self.iface.mapCanvas())
        #self.movePointTool = MovePointMapTool(self.iface, self.iface.mapCanvas(), 'Toby Box', None)
        #self.CountPropertiesTool = SelectCPTool(self.iface, self.iface.mapCanvas())
        #self.freehandPolyTool = FreehandPolygonMapTool(self.iface.mapCanvas())

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Network Design Tools')

        self.toolbar = self.iface.addToolBar(u'NetworkDesignTools')
        self.toolbar.setObjectName(u'Network Design Tools')

        common.initPrerequisites(self.iface)
        if len(common.prerequisites) == 0 : return
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('NetworkDesignTools', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        location='Default',
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            if location == 'Default':
                # Adds plugin icon to Plugins toolbar
                self.iface.addToolBarIcon(action)
            elif location == 'Custom':
                self.toolbar.addAction(action)

        if add_to_menu:
            if location == 'Default':
                self.iface.addPluginToMenu(
                    self.menu,
                    action)
            elif location == 'DPTool':
                self.dpToolButton.menu().addAction(action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/network_design_tools/icon.png'
        icons_folder = ':/plugins/network_design_tools/icons'

        self.add_action(
            icon_path,
            text=self.tr(u'Network Design Tools'),
            add_to_toolbar=False,
            callback=self.run,
            parent=self.iface.mainWindow())

        self.add_action(
            icon_path,
            text=self.tr(u'Close Toolkit'),
            add_to_toolbar=False,
            callback=self.closePlugin,
            parent=self.iface.mainWindow())

        self.add_action(
            os.path.join(icons_folder,'houses.png'),
            text=self.tr(u'Count Properties in a polygon'),
            add_to_menu=False,
            location='Custom',
            callback=self.CountPropertiesInAPoly,
            parent=self.iface.mainWindow())

        self.add_action(
            os.path.join(icons_folder,'house.png'),
            text=self.tr(u'Create a Property Count layer for properties within a Primary Node'),
            add_to_menu=False,
            location='Custom',
            callback=self.CreatePropertyCountLayer,
            parent=self.iface.mainWindow())

        self.add_action(
            os.path.join(icons_folder,'table_view.png'),
            text=self.tr(u'Create a Bill of Quantities'),
            add_to_menu=False,
            location='Custom',
            callback=self.CreateBillofQuantities,
            parent=self.iface.mainWindow())

        # Connect the handler for the pointTool click event
        #self.CountPropertiesTool.canvasClicked.connect(self.selectPropObject)
        #self.CountPropertiesTool.deactivated.connect(self.resetCPTool)


        # will be set False in run()
        self.first_start = True

    def closePlugin(self):
        qgis.utils.unloadPlugin('fibre_toolkit')

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Network Design Tools'),
                action)
            self.iface.removeToolBarIcon(action)

        # remove the custom toolbar
        del self.toolbar

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            #self.dlg = NetworkDesignToolsDialog()

        # show the dialog
        #self.dlg.show()
        # Run the dialog event loop
        #result = self.dlg.exec_()
        # See if OK was pressed
        #if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            #pass


    def linkDP(self):
        pass
 
    def CreateBillofQuantities(self):


        pass


    def CreatePropertyCountLayer(self):
        layers = common.prerequisites['layers']
        bdryLayerName = layers['Boundaries']['name'] 
        bdryLyr = self.iface.mapCanvas().currentLayer()
        if bdryLyr == None:
            return

        if bdryLyr.name() != bdryLayerName:
            errMsg = "You must select a polygon from the " + bdryLayerName + " layer."
            errTitle = 'Wrong layer selected: ' + bdryLyr.name()
            QMessageBox.critical(self.iface.mainWindow(), errTitle, errMsg)
            return

        if bdryLyr.selectedFeatureCount() > 1:
            errTitle = "Multiple polygons selected"
            QMessageBox.critical(self.iface.mainWindow(), errTitle, errMsg)
            return

        #select all properties overlapping
        bdryFeat = bdryLyr.selectedFeatures()[0]
        tempLyr = QgsVectorLayer("Polygon?crs=EPSG:27700", "Temp_Boundary", "memory")
        tempLyr.dataProvider().addFeature(bdryFeat)

        bldLayerName = layers['Premises']['name']

        cpLyr = common.getLayerByName(self.iface, QgsProject.instance(), bldLayerName, True)
        processing.run("qgis:selectbylocation", {'INPUT':cpLyr, 'INTERSECT':tempLyr, 'METHOD':0, 'PREDICATE':[0]})

        tempLyr2 = QgsVectorLayer("Point?crs=EPSG:27700", "Temp_Prop", "memory")
        tempLyr2.dataProvider().addAttributes( [ QgsField("x", QVariant.Double), QgsField("y", QVariant.Double) ] )
        tempLyr2.updateFields()
        for feat in cpLyr.selectedFeatures():
            pc = QgsVectorLayerUtils.createFeature(tempLyr2)
            pc.setGeometry(feat.geometry())
            pc.setAttribute('x', feat['X'])
            pc.setAttribute('y', feat['Y'])
            tempLyr2.dataProvider().addFeature(pc)

        tempLyr2.commitChanges()
        
        PCLayerName = layers['PropertyCount']['name'] 
        PCCountColName = layers['PropertyCount']['fields']['Count'] 
        
        QgsProject.instance().addMapLayer(tempLyr2)

        query = "Select count(*) " + PCCountColName + ",x,y from [Temp_Prop] group by {0}".format('x,y')
        vlayer = QgsVectorLayer( "?query={}".format(query), 'counts_'+bldLayerName, "virtual" )
        #append each building to a property count layer,with a count of properties in the building
        vlayer.dataProvider().addAttributes( [ QgsField(PCCountColName, QVariant.Int) ] )
        vlayer.updateFields()
        
        QgsProject.instance().addMapLayer(vlayer)
        
        pcLyr = common.getLayerByName(self.iface, QgsProject.instance(), PCLayerName, True)
        pcLyr.startEditing()
        try:
            for feat in vlayer.getFeatures(): 
                pc = QgsVectorLayerUtils.createFeature(pcLyr)
                gPnt = QgsGeometry.fromPointXY(QgsPointXY(feat['x'],feat['y']))
                pc.setGeometry(gPnt)#(feat.geometry())
                pc.setAttribute(PCCountColName, feat[PCCountColName])
                pcLyr.addFeature(pc)
        except Exception as e:
            print(e)

        pcLyr.commitChanges()
        pcLyr.rollBack()

        reply = QMessageBox.information(self.iface.mainWindow(),'Network Design Toolkit', str(vlayer.featureCount()) +' property counts inserted.', QMessageBox.Ok)

        QgsProject.instance().removeMapLayer(vlayer)
        QgsProject.instance().removeMapLayer(tempLyr2)

        pass

    def CountPropertiesInAPoly(self):
        """ The user should already have a polygon selected.  
            Ensure this is the case and then send the geometry to the main function. """
        errMsg = 'Please select a single polygon feature in an active layer.'

        bdryLyr = self.iface.mapCanvas().currentLayer()
        if bdryLyr == None:
            QMessageBox.critical(self.iface.mainWindow(), 'No active layer', errMsg)
            return
        if bdryLyr.selectedFeatureCount() == 0:
            errTitle = 'No feature selected'
            QMessageBox.critical(self.iface.mainWindow(), errTitle, errMsg)
            return
        elif bdryLyr.selectedFeatureCount() > 1:
            errTitle = "Multiple polygons selected"
            QMessageBox.critical(self.iface.mainWindow(), errTitle, errMsg)
            return
        
        # By this point the user has a single, existing feature selected
        # Now pass the geometry to the query
        bdryFeat = bdryLyr.selectedFeatures()[0]

        tempLyr = QgsVectorLayer("Polygon?crs=EPSG:27700", "Temp_Boundary", "memory")
        tempLyr.dataProvider().addFeature(bdryFeat)

        layers = common.prerequisites['layers']
        
        bldLayerName = layers['Premises']['name']

        cpLyr = common.getLayerByName(self.iface, QgsProject.instance(), bldLayerName, True)

        processing.run("qgis:selectbylocation", {'INPUT':cpLyr, 'INTERSECT':tempLyr, 'METHOD':0, 'PREDICATE':[0]})

        reply = QMessageBox.information(self.iface.mainWindow(),'Network Design Toolkit', str(cpLyr.selectedFeatureCount()) +' properties in this area.', QMessageBox.Ok)
        


