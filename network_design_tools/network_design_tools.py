# -*- coding: utf-8 -*-
"""
/***************************************************************************
 NetworkDesignTools
                                 A QGIS plugin
 Network Design Tools
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-02-24
        git sha              : $Format:%H$
        copyright            : (C) 2021 by ESDM
        email                : paulm@esdm.co.uk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path

from functools import partial
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QToolButton, QMenu, QFileDialog
from qgis.core import QgsProject, QgsVectorLayer, QgsPoint, QgsField, \
                      QgsFeatureRequest, QgsVectorLayerUtils, QgsGeometry, QgsPointXY, NULL
from qgis.utils import unloadPlugin
import processing

# Import generic functions
from network_design_tools import common
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the point tool
from .map_tools import SelectDCMapTool, ConnectNodesMapTool
# Import the code for the dialog
#from .property_count_dialog import PropertyCountDialog
# Import the code to connect nodes
from .connect_points import createNodeCable

class NetworkDesignTools:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'NetworkDesignTools_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        common.initPrerequisites(self.iface)
        if len(common.prerequisites) == 0 :
            return

        # initialize freeHandTools
        self.activeTool = None
        #self.pointTool = PointMapTool(self.iface.mapCanvas())
        self.linkDCTool = SelectDCMapTool(self.iface, self.iface.mapCanvas())
        self.connectNodesTool = ConnectNodesMapTool(self.iface, self.iface.mapCanvas())
        #self.movePointTool = MovePointMapTool(self.iface, self.iface.mapCanvas(), 'Toby Box', None)
        #self.CountPropertiesTool = SelectCPTool(self.iface, self.iface.mapCanvas())
        #self.freehandPolyTool = FreehandPolygonMapTool(self.iface.mapCanvas())

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Network Design Tools')

        self.toolbar = self.iface.addToolBar(u'NetworkDesignTools')
        self.toolbar.setObjectName(u'Network Design Tools')
        self.routingType = None

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('NetworkDesignTools', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        location='Default',
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            if location == 'Default':
                # Adds plugin icon to Plugins toolbar
                self.iface.addToolBarIcon(action)
            elif location == 'Custom':
                self.toolbar.addAction(action)

        if add_to_menu:
            if location == 'Default':
                self.iface.addPluginToMenu(
                    self.menu,
                    action)
            elif location == 'CableTool':
                self.cableToolButton.menu().addAction(action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/network_design_tools/icon.png'
        icons_folder = ':/plugins/network_design_tools/icons'

        self.add_action(
            icon_path,
            text=self.tr(u'Network Design Tools'),
            add_to_toolbar=False,
            callback=self.run,
            parent=self.iface.mainWindow())

        self.add_action(
            icon_path,
            text=self.tr(u'Close Toolkit'),
            add_to_toolbar=False,
            callback=self.closePlugin,
            parent=self.iface.mainWindow())

        self.add_action(
            os.path.join(icons_folder,'houses.png'),
            text=self.tr(u'Count Properties in a polygon'),
            add_to_menu=False,
            location='Custom',
            callback=self.CountPropertiesInAPoly,
            parent=self.iface.mainWindow())

        self.add_action(
            os.path.join(icons_folder,'house.png'),
            text=self.tr(u'Create a Property Count layer for properties within a Primary Node'),
            add_to_menu=False,
            location='Custom',
            callback=self.CreatePropertyCountLayer,
            parent=self.iface.mainWindow())

        self.add_action(
            os.path.join(icons_folder,'table_view.png'),
            text=self.tr(u'Create a Bill of Quantities'),
            add_to_menu=False,
            location='Custom',
            callback=self.CreateBillofQuantities,
            parent=self.iface.mainWindow())

        self.add_action(
            os.path.join(icons_folder,'graphics-tablet.png'),
            text=self.tr(u'Attribute Update'),
            add_to_menu=False,
            location='Custom',
            callback=self.UpdateAttributes,
            parent=self.iface.mainWindow())

        self.linkDCBtn = self.add_action(
            os.path.join(icons_folder,'node_add.png'),
            text=self.tr(u'Drop cable builder'),
            add_to_menu=False,
            location='Custom',
            callback=self.linkDC,
            parent=self.iface.mainWindow())
        self.linkDCBtn.setCheckable(True)

        self.cableToolButton = QToolButton()
        self.cableToolButton.setMenu(QMenu())
        self.cableToolButton.setPopupMode(QToolButton.MenuButtonPopup)
        self.actions.append(self.toolbar.addWidget(self.cableToolButton))

        self.ugCableBtn = self.add_action(
            os.path.join(icons_folder,'cable_add.png'),
            text=self.tr(u'Cable builder (Underground)'),
            add_to_toolbar=False,
            location='CableTool',
            callback=partial(self.selectNodes, 'UG'),
            parent=self.iface.mainWindow())
        self.cableToolButton.setDefaultAction(self.ugCableBtn)

        self.aerialCableBtn = self.add_action(
            os.path.join(icons_folder,'aerial_cable_add.png'),
            text=self.tr(u'Cable builder (Aerial)'),
            add_to_toolbar=False,
            location='CableTool',
            callback=partial(self.selectNodes, 'A'),
            parent=self.iface.mainWindow())

        #self.linkDCPolyTool.setAction(dropCableBtn)

        # Connect the handler for the linkDCTool click event
        self.linkDCTool.dcSelected.connect(self.selectDCObject)
        self.linkDCTool.deactivated.connect(self.resetSelectDCTool)

        # Connect the handler for the connectNodesTool click event
        self.connectNodesTool.pointsClicked.connect(self.generateCable)
        self.connectNodesTool.deactivated.connect(self.resetConnectNodesTool)

        # will be set False in run()
        self.first_start = True



    def closePlugin(self):
        unloadPlugin('network_design_tools')

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Network Design Tools'),
                action)
            self.iface.removeToolBarIcon(action)

        # disconnect the link DP tool handler
        self.linkDCTool.dcSelected.disconnect(self.selectDCObject)
        self.linkDCTool.deactivated.disconnect(self.resetSelectDCTool)
        del self.linkDCTool

        # disconnect the auto cable tool handler
        self.connectNodesTool.pointsClicked.disconnect(self.generateCable)
        self.connectNodesTool.deactivated.disconnect(self.resetConnectNodesTool)
        del self.connectNodesTool

        # remove the custom toolbar
        del self.toolbar

    def run(self):
        """Run method that performs all the real work"""

        if self.first_start:
            self.first_start = False


    def selectDCObject(self, poleId, SNID):
        '''
        Prompt user to click on pole
        Prompt user to click on secondary node(SN) polygon
        Select all address points in the SN
        For each address point:
        Draw a cable from the pole to the address point
        Select the mastermap building polygon that the address point falls inside
        Delete the part of the cable that falls inside the building
        Save the cable id against the address point
        Save the address point ID against the cable
        Populate the cable fields
        '''

        layers = common.prerequisites['layers']
        bdryLayerName = layers['Boundaries']['name']
        poleLayerName = layers['Poles']['name']
        AddressLayerName = layers['Premises']['name']
        CableLayerName = layers['Cable']['name']

        bdryLyr = common.getLayerByName(self.iface, QgsProject.instance(), bdryLayerName)
        if bdryLyr is None:
            return

        poleLyr = common.getLayerByName(self.iface, QgsProject.instance(), poleLayerName)
        if poleLyr is None:
            return

        for feat in poleLyr.getFeatures(QgsFeatureRequest(poleId)):
            Pole = feat

        for feat in bdryLyr.getFeatures(QgsFeatureRequest(SNID)):
            bdryFeat = feat

        cableLyr = common.getLayerByName(self.iface, QgsProject.instance(), CableLayerName)
        if cableLyr is None:
            return

        tempLyr = QgsVectorLayer("Polygon?crs=EPSG:27700", "Temp_Boundary", "memory")
        tempLyr.dataProvider().addFeature(bdryFeat)

        cpLyr = common.getLayerByName(self.iface, QgsProject.instance(), AddressLayerName, True)
        if cpLyr is None:
            return

       #get the intersecting properties
        processing.run("qgis:selectbylocation", {'INPUT':cpLyr, 'INTERSECT':tempLyr, 'METHOD':0, 'PREDICATE':[0]})

        message = '%s properties have been found within the SN area. Do you want to draw cables?' % (cpLyr.selectedFeatureCount())
        #print(message)
        reply = QMessageBox.question(self.iface.mainWindow(), 'Create Cables', message, QMessageBox.Yes, QMessageBox.No)
        if reply == QMessageBox.No:
            return

        MMLayerName = layers['TopoArea']['name']
        MMLyr = common.getLayerByName(self.iface, QgsProject.instance(), MMLayerName)
        if MMLyr is None:
            return

        for cpfeat in cpLyr.selectedFeatures(): #loop through the properties
            new_cable = []
            new_cable.append(QgsPoint(Pole.geometry().asPoint().x(),Pole.geometry().asPoint().y()))
            new_cable.append(QgsPoint(cpfeat.geometry().asPoint().x(),cpfeat.geometry().asPoint().y()))

            pc = QgsVectorLayerUtils.createFeature(cableLyr)
            pc.setGeometry(QgsGeometry.fromPolyline(new_cable))
            pc.setAttribute('Feed', '2') #Aerial
            if cpfeat['TN'] == NULL:
                pc.setAttribute('Cable name', cpfeat['SN'])
            else:
                pc.setAttribute('Cable name', '{}-{}'.format(cpfeat['SN'],cpfeat['TN']))
            cableLyr.dataProvider().addFeature(pc)
            cableLyr.triggerRepaint()

            #cut out the bit of cable that falls within the mastermap polygon associated with this property
            #todo
            #get the mastermap geom

            #tempPropLyr = QgsVectorLayer("Polygon?crs=EPSG:27700", "Temp_Boundary", "memory")
            #tempPropLyr.dataProvider().addFeature(cpfeat)

            #processing.run("qgis:selectbylocation", {'INPUT':MMLyr, 'INTERSECT':tempPropLyr, 'METHOD':0, 'PREDICATE':[0]})
            #MMFeatures = MMLyr.selectedFeatures

            #pc.setGeometry(QgsGeometry.fromPolyline(new_cable))
            #pc.QgsGeometry
            #cableLyr.dataProvider().addFeature(pc)




    def UpdateAttributes(self):
        '''
            check that selected poly is a PN
            select all addresspoints in it (customer properties?)
            update each addresspoint with AC??? SN TN LOC?
            Set the Length field to the length of the supply drop cable ?
            add these fields if not exist already?
            can this be done automatically?
        '''

        layers = common.prerequisites['layers']
        bdryLayerName = layers['Boundaries']['name']
        AddressLayerName = layers['Premises']['name']

        bdryLyr = self.iface.mapCanvas().currentLayer()

        if bdryLyr is None:
            return

        if bdryLyr.name() != bdryLayerName:
            errMsg = "You must select a polygon from the " + bdryLayerName + " layer."
            errTitle = 'Wrong layer selected: ' + bdryLyr.name()
            QMessageBox.critical(self.iface.mainWindow(), errTitle, errMsg)
            return

        errMsg = "You must select a single polygon from the " + bdryLayerName + " layer."
        if bdryLyr.selectedFeatureCount() == 0:
            errTitle = "No polygon selected"
            QMessageBox.critical(self.iface.mainWindow(), errTitle, errMsg)
            return
        elif bdryLyr.selectedFeatureCount() > 1:
            errMsg = "You must select a single polygon from the " + bdryLayerName + " layer."
            errTitle = "Multiple polygons selected"
            QMessageBox.critical(self.iface.mainWindow(), errTitle, errMsg)
            return

        bdryFeat = bdryLyr.selectedFeatures()[0]
        if bdryFeat['Type'] != '1':
            print (bdryFeat['Type'])
            errMsg = "You must select a Primary node polygon from the " + bdryLayerName + " layer."
            errTitle = "Wrong polygon selected"
            QMessageBox.critical(self.iface.mainWindow(), errTitle, errMsg)
            return

        reply = QMessageBox.question(self.iface.mainWindow(),'Network Design Toolkit', \
            'Update {} layer with values from {}?'.format(AddressLayerName,bdryLayerName))
        if reply == QMessageBox.No:
            return


        tempLyr = QgsVectorLayer("Polygon?crs=EPSG:27700", "Temp_Boundary", "memory")
        tempLyr.dataProvider().addFeature(bdryFeat)

        cpLyr = common.getLayerByName(self.iface, QgsProject.instance(), AddressLayerName, True)
        if cpLyr is None:
            return

        #get the intersecting properties
        processing.run("qgis:selectbylocation", {'INPUT':cpLyr, 'INTERSECT':tempLyr, 'METHOD':0, 'PREDICATE':[0]})
        processing.run("qgis:selectbylocation", {'INPUT':bdryLyr, 'INTERSECT':tempLyr, 'METHOD':0, 'PREDICATE':[0]})

        cp_dp = cpLyr.dataProvider()

        cpLyr.startEditing()

        for cpfeat in cpLyr.selectedFeatures(): #set all to No first, then ignore any n/a=6
            cpfeat.setAttribute('LOC', '1')
            cpfeat.setAttribute('LOC_TYPE', NULL)
            cpLyr.updateFeature(cpfeat)

        for bdryfeat in bdryLyr.selectedFeatures():
            for cpfeat in cpLyr.selectedFeatures():
                if cpfeat.geometry().intersects(bdryfeat.geometry()):

                    bdryType = bdryfeat['Type']
                    if bdryType == '1': # UGPN
                        cpfeat.setAttribute('PN', bdryfeat['Name'])
                    elif bdryType == '2' or bdryType == '3': # UGSN or PMSN
                        cpfeat.setAttribute('SN', bdryfeat['Name'])
                    elif bdryType == '4': # UGCE ?
                        cpfeat.setAttribute('TN', bdryfeat['Name'])

                    LOC = bdryfeat['LOC']
                    if LOC != '6': # = 'N/A' Set the LOC to true if inside an LOC polygon, Set LOCType to the LOC type value
                        cpfeat.setAttribute('LOC', '2')

                        if LOC == '1': #Wayleave
                            cpfeat.setAttribute('LOC_TYPE', 'WL')
                        elif LOC == '2': #Private Road
                            cpfeat.setAttribute('LOC_TYPE', 'PR')
                        elif LOC == '3': #Uneconomical
                            cpfeat.setAttribute('LOC_TYPE', 'UE')
                        elif LOC == '4': #Section 58
                            cpfeat.setAttribute('LOC_TYPE', 'S58')
                        elif LOC == '5': #Conservation
                            cpfeat.setAttribute('LOC_TYPE', 'CON')
                    #else:
                    #    print('setting LOC to N')
                    #    cpfeat.setAttribute('LOC', 'N')
                    #    cpfeat.setAttribute('LOC_TYPE', '')

                    #cpLyr.updateFields()
                    cpLyr.updateFeature(cpfeat)

        cpLyr.commitChanges()


    def CreateBillofQuantities(self):
        layers = common.prerequisites['layers']
        bdryLayerName = layers['Boundaries']['name']
        bdryLyr = self.iface.mapCanvas().currentLayer()
        if bdryLyr is None:
            return

        if bdryLyr.name() != bdryLayerName:
            errMsg = "You must select a polygon from the " + bdryLayerName + " layer."
            errTitle = 'Wrong layer selected: ' + bdryLyr.name()
            QMessageBox.critical(self.iface.mainWindow(), errTitle, errMsg)
            return

        if bdryLyr.selectedFeatureCount() > 1:
            errTitle = "Multiple polygons selected"
            QMessageBox.critical(self.iface.mainWindow(), errTitle, errMsg)
            return

        bdryFeat = bdryLyr.selectedFeatures()[0]
        if bdryFeat['Type'] != '1':
            print (bdryFeat['Type'])
            errMsg = "You must select a Primary node polygon from the " + bdryLayerName + " layer."
            errTitle = "Wrong polygon selected"
            QMessageBox.critical(self.iface.mainWindow(), errTitle, errMsg)
            return

        #get the boundary, for selecting everything else
        tempLyr = QgsVectorLayer("Polygon?crs=EPSG:27700", "Temp_Boundary", "memory")
        tempLyr.dataProvider().addFeature(bdryFeat)

        #csvFileName  = layers['BillofQuantities']['source']
        csvFileName = QFileDialog.getSaveFileName(caption='Save Bill of Quantities As', filter='CSV (Comma delimited) (*.csv)', directory=os.path.expanduser('~'))[0]
        if csvFileName == '':
            return
        #run through the required checks from the json file
        i=0
        isFirst=True
        try:
            searchLayer = layers['BillofQuantities']['stats']['Stat'+str(i)]['Layer']
        except:
            searchLayer = ""

        while searchLayer != '':
            #print(layers['BillofQuantities']['stats']['Stat'+str(i)]['Title'])

            try:
                searchName = layers['BillofQuantities']['stats']['Stat'+str(i)]['Title']
            except:
                searchName = "untitled"

            cpLyr = common.getLayerByName(self.iface, QgsProject.instance(), searchLayer, True)
            if cpLyr is not None:
                processing.run("qgis:selectbylocation", {'INPUT':cpLyr, 'INTERSECT':tempLyr, 'METHOD':0, 'PREDICATE':[0]})

                try:
                    fldName = layers['BillofQuantities']['stats']['Stat'+str(i)]['Field']
                except:
                    fldName = ""

                if fldName == '': #a straight count, or some Calculations ...
                    try:
                        srchName = layers['BillofQuantities']['stats']['Stat'+str(i)]['Calculation0']['Title']
                    except:
                        srchName = ""

                    if srchName == '': #a straight count
                        ans = common.writeToCSV(self.iface, csvFileName,{'Item':searchName, 'Quantity': str(cpLyr.selectedFeatureCount())}, isFirst)
                        isFirst = False
                    else:
                        j=0
                        ans = common.writeToCSV(self.iface, csvFileName,{'Item':searchName, 'Quantity': ''}, isFirst)
                        isFirst = False

                        while srchName != '':
                            srchCriteria = layers['BillofQuantities']['stats']['Stat'+str(i)]['Calculation'+str(j)]['Criteria']
                            #print (srchName + ' ' + srchCriteria)

                            processing.run("qgis:selectbyexpression", {'INPUT':cpLyr, 'EXPRESSION':srchCriteria, 'METHOD':0})

                            ans = common.writeToCSV(self.iface, csvFileName,{'Item': srchName, 'Quantity': str(cpLyr.selectedFeatureCount())}, isFirst)

                            j+=1
                            try:
                                srchName = layers['BillofQuantities']['stats']['Stat'+str(i)]['Calculation'+str(j)]['Title']
                            except:
                                srchName = ""

                else: #group by the field name, write each value+count to the csv
                    #processing.run("qgis:saveselectedfeatures",cpLyr,'xgtemp')
                    ans = common.writeToCSV(self.iface, csvFileName,{'Item':searchName, 'Quantity': ''}, isFirst)
                    isFirst = False

                   # tempLyr2 = QgsVectorLayer("Point?crs=EPSG:27700", "temp", "memory")
                   # tempLyr2.dataProvider().addAttributes( [ QgsField("Desc", QVariant.String) ] )
                   # tempLyr2.updateFields()
                    aDict = {}

                    for feat in cpLyr.selectedFeatures():
                        #print('fldName='+ fldName)
                        #fldVal = ''
                        fldVal = feat[fldName]
                        #print('fldVal='+fldVal)
                        dictValue = aDict.get(fldVal)
                        if dictValue is None:
                            aDict[fldVal] = 1
                        else:
                            aDict[fldVal] = dictValue + 1

                        #pc = QgsVectorLayerUtils.createFeature(tempLyr2)
                        #pc.setGeometry(feat.geometry())
                        #pc.setAttribute('Desc', feat[fldName])

                    #tempLyr2.commitChanges()

                    #query = "Select count(*) numOf,{0} from [temp] group by {0}".format(fldName)
                   # vlayer = QgsVectorLayer( "?query={}".format(query), 'counts_', "virtual" )
                    for x, y in aDict.items():
                        #print (x)
                        #print (aDict[x])
                        ans = common.writeToCSV(self.iface, csvFileName,{'Item': x, 'Quantity': y}, isFirst)
                        isFirst = False

            i+=1
            try:
                searchLayer = layers['BillofQuantities']['stats']['Stat'+str(i)]['Layer']
            except:
                searchLayer = ""

        #select all properties overlapping
    #    bldLayerName = layers['Premises']['name']
    #    cpLyr = common.getLayerByName(self.iface, QgsProject.instance(), bldLayerName, True)
    #    processing.run("qgis:selectbylocation", {'INPUT':cpLyr, 'INTERSECT':tempLyr, 'METHOD':0, 'PREDICATE':[0]})

        #add Premises FED total | cpLyr.selectedFeatureCount()
        #to a csv
        #BillofQuantites

        #csvData = []

        #csvData.append({'Item':'Premises FED total', 'Quantity': str(cpLyr.selectedFeatureCount())})

        #csvData.append({'Item':'Premises aerially fed', 'Quantity': str(cpLyr.selectedFeatureCount())})


    #    ans = writeToCSV(self.iface, csvFileName,{'Item':'Premises FED total', 'Quantity': str(cpLyr.selectedFeatureCount())}, True)
    #    ans = writeToCSV(self.iface, csvFileName,{'Item':'Premises aerially fed', 'Quantity': str(cpLyr.selectedFeatureCount())})

        #ans = writeToCSV(self.iface, csvFileName,csvData)

        QMessageBox.information(self.iface.mainWindow(),'Network Design Toolkit', 'Bill of quantities file created.\n' + csvFileName , QMessageBox.Ok)


    def CreatePropertyCountLayer(self):
        layers = common.prerequisites['layers']
        bdryLayerName = layers['Boundaries']['name']
        bdryLyr = self.iface.mapCanvas().currentLayer()
        if bdryLyr is None:
            return

        if bdryLyr.name() != bdryLayerName:
            errMsg = "You must select a polygon from the " + bdryLayerName + " layer."
            errTitle = 'Wrong layer selected: ' + bdryLyr.name()
            QMessageBox.critical(self.iface.mainWindow(), errTitle, errMsg)
            return

        if bdryLyr.selectedFeatureCount() > 1:
            errMsg = "You must select a single polygon from the " + bdryLayerName + " layer."
            errTitle = "Multiple polygons selected"
            QMessageBox.critical(self.iface.mainWindow(), errTitle, errMsg)
            return

        #select all properties overlapping
        bdryFeat = bdryLyr.selectedFeatures()[0]
        tempLyr = QgsVectorLayer("Polygon?crs=EPSG:27700", "Temp_Boundary", "memory")
        tempLyr.dataProvider().addFeature(bdryFeat)

        bldLayerName = layers['Premises']['name']

        cpLyr = common.getLayerByName(self.iface, QgsProject.instance(), bldLayerName, True)
        if cpLyr is None:
            return
        processing.run("qgis:selectbylocation", {'INPUT':cpLyr, 'INTERSECT':tempLyr, 'METHOD':0, 'PREDICATE':[0]})

        tempLyr2 = QgsVectorLayer("Point?crs=EPSG:27700", "Temp_Prop", "memory")
        tempLyr2.dataProvider().addAttributes( [ QgsField("x", QVariant.Double), QgsField("y", QVariant.Double) ] )
        tempLyr2.updateFields()
        for feat in cpLyr.selectedFeatures():
            pc = QgsVectorLayerUtils.createFeature(tempLyr2)
            pc.setGeometry(feat.geometry())
            #feat.asPoint().x()
            #feat.asPoint().y()
            pc.setAttribute('x', feat['X'])
            pc.setAttribute('y', feat['Y'])
            tempLyr2.dataProvider().addFeature(pc)

        tempLyr2.commitChanges()

        PCLayerName = layers['PropertyCount']['name']
        PCCountColName = layers['PropertyCount']['fields']['Count']

        QgsProject.instance().addMapLayer(tempLyr2)

        query = "Select count(*) " + PCCountColName + ",x,y from [Temp_Prop] group by {0}".format('x,y')
        vlayer = QgsVectorLayer( "?query={}".format(query), 'counts_'+bldLayerName, "virtual" )
        #append each building to a property count layer,with a count of properties in the building
        vlayer.dataProvider().addAttributes( [ QgsField(PCCountColName, QVariant.Int) ] )
        vlayer.updateFields()

        QgsProject.instance().addMapLayer(vlayer)

        pcLyr = common.getLayerByName(self.iface, QgsProject.instance(), PCLayerName, True)
        if pcLyr is None:
            return
        pcLyr.startEditing()
        try:
            for feat in vlayer.getFeatures():
                pc = QgsVectorLayerUtils.createFeature(pcLyr)
                gPnt = QgsGeometry.fromPointXY(QgsPointXY(feat['x'],feat['y']))
                pc.setGeometry(gPnt)#(feat.geometry())
                pc.setAttribute(PCCountColName, feat[PCCountColName])
                pcLyr.addFeature(pc)
        except Exception as e:
            print(e)

        pcLyr.commitChanges()
        pcLyr.rollBack()

        QMessageBox.information(self.iface.mainWindow(),'Network Design Toolkit', \
                                str(vlayer.featureCount()) +' property counts inserted.', QMessageBox.Ok)

        QgsProject.instance().removeMapLayer(vlayer)
        QgsProject.instance().removeMapLayer(tempLyr2)

    def CountPropertiesInAPoly(self):
        """ The user should already have a polygon selected.
            Ensure this is the case and then send the geometry to the main function. """
        errMsg = 'Please select a single polygon feature in an active layer.'

        bdryLyr = self.iface.mapCanvas().currentLayer()
        if bdryLyr is None:
            QMessageBox.critical(self.iface.mainWindow(), 'No active layer', errMsg)
            return
        if bdryLyr.selectedFeatureCount() == 0:
            errTitle = 'No feature selected'
            QMessageBox.critical(self.iface.mainWindow(), errTitle, errMsg)
            return
        elif bdryLyr.selectedFeatureCount() > 1:
            errTitle = "Multiple polygons selected"
            QMessageBox.critical(self.iface.mainWindow(), errTitle, errMsg)
            return

        # By this point the user has a single, existing feature selected
        # Now pass the geometry to the query
        bdryFeat = bdryLyr.selectedFeatures()[0]

        tempLyr = QgsVectorLayer("Polygon?crs=EPSG:27700", "Temp_Boundary", "memory")
        tempLyr.dataProvider().addFeature(bdryFeat)

        layers = common.prerequisites['layers']

        bldLayerName = layers['Premises']['name']

        cpLyr = common.getLayerByName(self.iface, QgsProject.instance(), bldLayerName, True)
        if cpLyr is None:
            return

        processing.run("qgis:selectbylocation", {'INPUT':cpLyr, 'INTERSECT':tempLyr, 'METHOD':0, 'PREDICATE':[0]})

        QMessageBox.information(self.iface.mainWindow(),'Network Design Toolkit', \
            str(cpLyr.selectedFeatureCount()) +' properties in this area.', QMessageBox.Ok)


    def selectNodes(self, routingType):
        # Activate cable tool if required
        # Store snappingConfig to reset afterwards
        #self.snapConfig = QgsProject.instance().snappingConfig()

        self.routingType = routingType
        if self.routingType == 'UG':
            if self.cableToolButton.defaultAction().text() != self.ugCableBtn.text():
                self.cableToolButton.setDefaultAction(self.ugCableBtn)
        else:
            if self.cableToolButton.defaultAction().text() != self.aerialCableBtn.text():
                self.cableToolButton.setDefaultAction(self.aerialCableBtn)
        if not self.cableToolButton.isDown():
                self.cableToolButton.setDown(True)

        if not self.connectNodesTool.isActive():
            self.iface.mapCanvas().setMapTool(self.connectNodesTool)
        else:
            self.connectNodesTool.reset()

# Map Tool Event Handlers

    def linkDC(self):

        if not self.linkDCTool.isActive():
            self.iface.mapCanvas().setMapTool(self.linkDCTool)

    def resetSelectDCTool(self):
        self.linkDCBtn.setChecked(False)

    def generateCable(self, startPoint, startLayerName, startFid, endPoint, endLayerName, endFid):
        createNodeCable(self.iface, self.routingType, startPoint, startLayerName, startFid, endPoint, endLayerName, endFid)

    def resetConnectNodesTool(self):
        self.routingType = None
        self.cableToolButton.setDown(False)
